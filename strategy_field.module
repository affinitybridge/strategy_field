<?php

/**
 * Implements hook_field_info().
 */
function strategy_field_field_info() {
  $field_info['strategy_field'] = array(
    'label' => t('Strategy Field'),
    'description' => t('This field implements the Strategy pattern for dynamic processing at runtime.'),
    'default_widget' => 'strategy_field_widget',
    'default_formatter' => 'strategy_field_formatter',
  );
  return $field_info;
}

/**
 * Implements hook_field_widget_info().
 */
function strategy_field_field_widget_info() {
  return array(
    'strategy_field_widget' => array(
      'label' => t('Default Strategy Field'),
      'field types' => array('strategy_field'),
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function strategy_field_field_formatter_info() {
  return array(
    'strategy_field_formatter' => array(
      'label' => t('Default Strategy Field'),
      'field types' => array('strategy_field'),
    ),
  );
}

/**
 * Implements hook_field_is_empty().
 */
function strategy_field_field_is_empty($item, $field) {
  return empty($item['class']);
}

/**
 * Implements hook_field_widget_form().
 */
function strategy_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $class_options = array();
  if (!$instance['required']) {
    $class_options[''] = t('None');
  }

  // Get Class options, for each class option, get form field
  // Get all strategy field base classes
  $class_type = $field['settings']['class_type'];
  $strategy_field_classes = module_invoke_all('strategy_field_classes');
  $classes = $strategy_field_classes[$class_type];
  foreach ($classes as $class_name) {
    $class_options[$class_name] = $class_name::getLabel();
  }
  $field_name = $instance['field_name'];
  
  // Strategy Field needs some kind of field settings, maybe to say what class is allowed
  $element['class'] = array(
    '#type' => 'radios',
    '#default_value' => empty($items[$delta]['class']) ? '' : $items[$delta]['class'],
    '#options' => $class_options,
  );

  $element['values'] = array(
    '#type' => 'container',
  );

  foreach ($classes as $class_name) {
    $strategy_values_key = 'strategy-values-' . $class_name;
    $element['values'][$strategy_values_key] = array(
      '#type' => 'fieldset',
      '#title' => $class_name::getLabel(),
      '#states' => array(
        'visible' => array(
          ':input[name="' . $field_name . '[und][0][class]"]' => array('value' => $class_name)
        ),
      ),
    );
    $strategy_values = array();
    if (!empty($items[$delta]['class']) && !strcmp($items[$delta]['class'], $class_name)) {
      $strategy_values = $items[$delta]['values'];
    }
    $class_object = new $class_name($strategy_values);
    $element['values'][$strategy_values_key] += $class_object->getForm();
  }
  
  return $element;
}

/**
 * Implements hook_field_settings_form().
 */
function strategy_field_field_settings_form($field, $instance, $has_data) {
  // Get all strategy field base classes
  $strategy_field_classes = module_invoke_all('strategy_field_classes');
  $options = array_keys($strategy_field_classes);

  $settings = $field['settings'];
  
  $form = array();
  
  $form['class_type'] = array(
    '#type' => 'select',
    '#title' => t('Strategy Field Type'),
    '#default_value' => $settings['class_type'],
    '#required' => TRUE,
    '#description' => t('The type of Strategy.'),
    '#disabled' => $has_data,
    '#options' => array_combine($options, $options),
  );
  
  return $form;
}

/**
 * Implements hook_field_presave().
 */
function strategy_field_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  foreach($items as $i => $item) {
    $strategy_name = $item['class'];
    $strategy_values = $item['values']['strategy-values-' . $strategy_name];
    $items[$i]['values'] = serialize($strategy_values);
  }
}

/**
 * Implements hook_field_load().
 */
function strategy_field_field_load($entity_type, $entities, $field, $instances, $langcode, &$items, $age) {
  foreach ($entities as $id => $entity) {
    foreach ($items[$id] as $delta => $item) {
      if (!is_array($item['values'])) {
        $items[$id][$delta]['values'] = unserialize($item['values']);
        $items[$id][$delta]['object'] = new $item['class']($items[$id][$delta]['values']);
      }
    }
  }
}


/**
 * Implements hook_field_formatter_view().
 */
function strategy_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  foreach ($items as $delta => $item) {
    if (!is_array($item['values'])) {
      $item['values'] = unserialize($item['values']);
    }
    $item['display'] = $display;
    $element[$delta] = array(
      '#markup' => theme('strategy_field_formatter_default', $item),
    );
  }

  return $element;
}

/**
 * Implements hook_theme().
 */
function strategy_field_theme() {
  return array(
    'strategy_field_formatter_default' => array(
      'variables' => array(
        'class' => NULL,
        'values' => array(),
        'object' => NULL,
        'display' => NULL,
      ),
    ),
  );
}

/**
 * Formats a link.
 */
function theme_strategy_field_formatter_default($vars) {
  $output = '<fieldset>';
  $output .= '<legend>' . $vars['class']::getLabel() . '</legend>';
  $output .= $vars['object']->formatter($vars['display']);
  $output .= '</fieldset>';

  return $output;
}

/**
 * Implements hook_field_field_validate().
 */
function strategy_field_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    // Check which class is set, then call validate for that class
    if (isset($item['class']) && !empty($item['class'])) {
      $strategy_values_key = 'strategy-values-' . $item['class'];
      $strategy_obj = new $item['class']($item['values'][$strategy_values_key]);
      $validation_errors = $strategy_obj->validate();

      foreach ($validation_errors as $error_msg) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'strategy_field_error',
          'message' => t(
            '%title: @class: !error_msg',
            array(
              '%title' => $instance['label'],
              '@class' => $item['class'],
              '!error_msg' => $error_msg,
            )
          ),
        );
      }
    }
  }
}

/**
 * Implements hook_field_widget_error().
 */
function strategy_field_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'strategy_field_error':
      form_error($element, $error['message']);
      break;
  }
}
