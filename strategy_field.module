<?php

define("GEOJSON_MENU_PREFIX", "/geojson");

use Affinity\GeoJSON\Resource as GeoJSONResource;

/**
 * Implements hook_libraries_info().
 */
function geojson_libraries_info() {
  return array(
    'geojson' => array(
      'name' => 'GeoJSON',
      'vendor url' => 'https://github.com/affinitybridge/php-geojson',
      'download url' => 'git@github.com:affinitybridge/php-geojson.git',
      'version' => '0.0.1',
      'files' => array(
        'php' => array(
          'Affinity/GeoJSON/CacheInterface.php',
          'Affinity/GeoJSON/Resource.php',
          'Affinity/GeoJSON/FeatureFactory.php'
        ),
      ),
    ),
  );
}

/**
 * Implements hook_node_presave().
 */
function geojson_node_presave($node) {
  // Clear all cached geojson values for this node ('geojson:{nid}:*').
  cache_clear_all("geojson:{$node->nid}", 'cache', TRUE);
}

/**
 * Implements hook_menu().
 */
function geojson_menu() {
  $items = array();

  foreach (geojson_info_load() as $id => $info) {
    $resource = geojson_load($info);
    $offset = count(explode('/', trim($resource->endpoint(), '/')));

    foreach (array('load arguments', 'page arguments', 'access arguments') as $key) {
      if (isset($info[$key])) foreach ($info[$key] as &$argument) {
        // Assuming numeric arguments refer to hook_menu() style url 'loaders'
        // and therefore need to be offset by the number of components in the
        // geojson menu prefix.
        if (is_numeric($argument)) $argument += $offset;
      }
    }

    $args = array($id);
    if (isset($info['page arguments'])) $args = array_merge($args, $info['page arguments']);

    $item = array_merge($info, array(
      'page callback' => 'geojson_json_menu_callback',
      'page arguments' => $args,
      'type' => MENU_CALLBACK,
    ));

    $url = trim($resource->uri(), '/');
    $items[$url] = $item;
  }

  return $items;
}

/**
 * GeoJSON menu callback.
 *
 * Get's GeoJSON object from arguments and sends it to client with appropriate
 * headers.
 */
function geojson_json_menu_callback() {
  $args = func_get_args();
  $info = geojson_info_load(array_shift($args));

  $resource = geojson_load($info, $args);
  $data = $resource->geojson();

  if (!$data) {
    return MENU_NOT_FOUND;
  }
  // Pass error response codes on to drupal to handle.
  else if (is_numeric($data)) {
    return $data;
  }

  geojson_response_json($data);
}

/**
 * Sends a JSON encoded data to client as a properly defined JSON response.
 */
function geojson_response_json($data) {
  // Send results to client as json and terminate request.
  drupal_add_http_header('Content-Type', 'application/json; charset=utf-8');
  print drupal_json_encode($data);
  ajax_footer();
}

/**
 *
 */
function _geojson_info($reset = FALSE) {
  $definitions = drupal_static(__FUNCTION__);

  if (empty($definitions) || $reset) {
    $cache = cache_get('geojson:resource_definitions');

    if (!$cache || $reset) {
      $definitions = module_invoke_all('geojson_info');
      cache_set('geojson:resource_definitions', $definitions);
      return $definitions;
    }

    $definitions = $cache->data;
  }

  return $definitions;
}

/**
 *
 */
function geojson_info_load($id = NULL) {
  $definitions = _geojson_info();

  if (empty($id)) {
    return $definitions;
  }

  return isset($definitions[$id]) ? $definitions[$id] : NULL;
}

/**
 *
 */
function geojson_load($info, $args = array()) {
  $library = libraries_load('geojson');
  if (!$library || !isset($library['installed'])) {
    return FALSE;
  }

  $callback = $info['data callback'];
  $loader = function() use ($callback, $args) {
    return call_user_func_array($callback, $args);
  };

  if (isset($info['use cache']) && $info['use cache'] && !isset($info['cache'])) {
    $info['cache'] = new GeojsonDrupalCache();
  }

  return $resource = new GeoJSONResource(GEOJSON_MENU_PREFIX, $info, $loader);
}

/**
 *
 */
function geojson_access($info) {
  $params = array_slice(func_get_args(), 1);
  $access = 'user_access';

  if (isset($info['access callback'])) {
    $access = $info['access callback'];
  }

  $args = array();
  if (isset($info['access arguments'])) {
    foreach ($info['access arguments'] as $arg) {
      $args[] = !is_numeric($arg) ? $arg : array_shift($params);
    }
  }
  $args = array_merge($args, $params);

  return call_user_func_array($access, $args);
}
